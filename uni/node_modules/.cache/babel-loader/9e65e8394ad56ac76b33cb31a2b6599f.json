{"ast":null,"code":"var _jsxFileName = \"/Users/lelouch/Desktop/ethnyc/eth-nyc-global/uni/src/CoinSwapper/CoinSwapper.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport { Container, Grid, IconButton, makeStyles, Paper, Typography } from \"@material-ui/core\";\nimport SwapVerticalCircleIcon from \"@material-ui/icons/SwapVerticalCircle\";\nimport { useSnackbar } from \"notistack\";\nimport LoopIcon from \"@material-ui/icons/Loop\";\nimport { getAccount, getFactory, getProvider, getRouter, getSigner, getNetwork, getAmountOut, getBalanceAndSymbol, getWeth, swapTokens, getReserves } from \"../ethereumFunctions\";\nimport CoinField from \"./CoinField\";\nimport CoinDialog from \"./CoinDialog\";\nimport LoadingButton from \"../Components/LoadingButton\";\nimport WrongNetwork from \"../Components/wrongNetwork\";\nimport COINS from \"../constants/coins\";\nimport * as chains from \"../constants/chains\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst styles = theme => ({\n  paperContainer: {\n    borderRadius: theme.spacing(2),\n    padding: theme.spacing(1),\n    paddingBottom: theme.spacing(3),\n    backgroundColor: \"#D0D5E2\",\n    fontFamily: \"sans-serif\"\n  },\n  switchButton: {\n    zIndex: 1,\n    margin: \"-16px\",\n    padding: theme.spacing(0.5)\n  },\n  fullWidth: {\n    width: \"100%\"\n  },\n  halfWidth: {\n    width: \"50%\"\n  },\n  title: {\n    textAlign: \"center\",\n    padding: theme.spacing(0.5),\n    marginBottom: theme.spacing(1)\n  },\n  hr: {\n    width: \"100%\"\n  },\n  balance: {\n    padding: theme.spacing(1),\n    overflow: \"wrap\",\n    textAlign: \"center\"\n  },\n  footer: {\n    marginTop: \"285px\"\n  },\n  timevar1: {\n    marginTop: \"15px\",\n    backgroundColor: \"#FFFFFF\",\n    padding: \"10px\",\n    marginRight: \"5px\",\n    borderRadius: theme.spacing(2),\n    height: \"70px\",\n    border: \"0px\",\n    width: \"48.5%\",\n    shadowBox: \"None\",\n    fontFamily: \"sans-serif\"\n  },\n  timevar2: {\n    marginTop: \"15px\",\n    backgroundColor: \"#FFFFFF\",\n    padding: \"10px\",\n    marginLeft: \"5px\",\n    borderRadius: theme.spacing(2),\n    height: \"70px\",\n    border: \"0px\",\n    width: \"48.5%\",\n    shadowBox: \"None\",\n    fontFamily: \"sans-serif\"\n  },\n  coinSelector: {\n    backgroundColor: \"#FFFFFF\"\n  }\n});\n\nconst useStyles = makeStyles(styles);\n\nfunction CoinSwapper(props) {\n  _s();\n\n  const classes = useStyles();\n  const {\n    enqueueSnackbar\n  } = useSnackbar(); // Stores a record of whether their respective dialog window is open\n\n  const [dialog1Open, setDialog1Open] = React.useState(false);\n  const [dialog2Open, setDialog2Open] = React.useState(false);\n  const [wrongNetworkOpen, setwrongNetworkOpen] = React.useState(false); // Stores data about their respective coin\n\n  const [coin1, setCoin1] = React.useState({\n    address: undefined,\n    symbol: undefined,\n    balance: undefined\n  });\n  const [coin2, setCoin2] = React.useState({\n    address: undefined,\n    symbol: undefined,\n    balance: undefined\n  }); // Stores the current reserves in the liquidity pool between coin1 and coin2\n\n  const [reserves, setReserves] = React.useState([\"0.0\", \"0.0\"]); // Stores the current value of their respective text box\n\n  const [field1Value, setField1Value] = React.useState(\"\");\n  const [field2Value, setField2Value] = React.useState(\"\"); // Controls the loading button\n\n  const [loading, setLoading] = React.useState(false); // Switches the top and bottom coins, this is called when users hit the swap button or select the opposite\n  // token in the dialog (e.g. if coin1 is TokenA and the user selects TokenB when choosing coin2)\n\n  const switchFields = () => {\n    setCoin1(coin2);\n    setCoin2(coin1);\n    setField1Value(field2Value);\n    setReserves(reserves.reverse());\n  }; // These functions take an HTML event, pull the data out and puts it into a state variable.\n\n\n  const handleChange = {\n    field1: e => {\n      setField1Value(e.target.value);\n    }\n  }; // Turns the account's balance into something nice and readable\n\n  const formatBalance = (balance, symbol) => {\n    if (balance && symbol) return parseFloat(balance).toPrecision(8) + \" \" + symbol;else return \"0.0\";\n  }; // Turns the coin's reserves into something nice and readable\n\n\n  const formatReserve = (reserve, symbol) => {\n    if (reserve && symbol) return reserve + \" \" + symbol;else return \"0.0\";\n  }; // Determines whether the button should be enabled or not\n\n\n  const isButtonEnabled = () => {\n    // If both coins have been selected, and a valid float has been entered which is less than the user's balance, then return true\n    const parsedInput1 = parseFloat(field1Value);\n    const parsedInput2 = parseFloat(field2Value);\n    return coin1.address && coin2.address && !isNaN(parsedInput1) && !isNaN(parsedInput2) && 0 < parsedInput1 && parsedInput1 <= coin1.balance;\n  }; // Called when the dialog window for coin1 exits\n\n\n  const onToken1Selected = address => {\n    // Close the dialog window\n    setDialog1Open(false); // If the user inputs the same token, we want to switch the data in the fields\n\n    if (address === coin2.address) {\n      switchFields();\n    } // We only update the values if the user provides a token\n    else if (address) {\n        // Getting some token data is async, so we need to wait for the data to return, hence the promise\n        getBalanceAndSymbol(props.network.account, address, props.network.provider, props.network.signer, props.network.weth.address, props.network.coins).then(data => {\n          setCoin1({\n            address: address,\n            symbol: data.symbol,\n            balance: data.balance\n          });\n        });\n      }\n  }; // Called when the dialog window for coin2 exits\n\n\n  const onToken2Selected = address => {\n    // Close the dialog window\n    setDialog2Open(false); // If the user inputs the same token, we want to switch the data in the fields\n\n    if (address === coin1.address) {\n      switchFields();\n    } // We only update the values if the user provides a token\n    else if (address) {\n        // Getting some token data is async, so we need to wait for the data to return, hence the promise\n        getBalanceAndSymbol(props.network.account, address, props.network.provider, props.network.signer, props.network.weth.address, props.network.coins).then(data => {\n          setCoin2({\n            address: address,\n            symbol: data.symbol,\n            balance: data.balance\n          });\n        });\n      }\n  }; // Calls the swapTokens Ethereum function to make the swap, then resets nessicary state variables\n\n\n  const swap = () => {\n    console.log(\"Attempting to swap tokens...\");\n    setLoading(true);\n    swapTokens(coin1.address, coin2.address, field1Value, props.network.router, props.network.account, props.network.signer).then(() => {\n      setLoading(false); // If the transaction was successful, we clear to input to make sure the user doesn't accidental redo the transfer\n\n      setField1Value(\"\");\n      enqueueSnackbar(\"Transaction Successful\", {\n        variant: \"success\"\n      });\n    }).catch(e => {\n      setLoading(false);\n      enqueueSnackbar(\"Transaction Failed (\" + e.message + \")\", {\n        variant: \"error\",\n        autoHideDuration: 10000\n      });\n    });\n  }; // The lambdas within these useEffects will be called when a particular dependency is updated. These dependencies\n  // are defined in the array of variables passed to the function after the lambda expression. If there are no dependencies\n  // the lambda will only ever be called when the component mounts. These are very useful for calculating new values\n  // after a particular state change, for example, calculating the new exchange rate whenever the addresses\n  // of the two coins change.\n  // This hook is called when either of the state variables `coin1.address` or `coin2.address` change.\n  // This means that when the user selects a different coin to convert between, or the coins are swapped,\n  // the new reserves will be calculated.\n\n\n  function getTimeHorizon(event) {\n    event.preventDefault();\n    console.log(event.target.value);\n  }\n\n  function getFrequency(event) {\n    event.preventDefault();\n    console.log(event.target.value);\n  }\n\n  useEffect(() => {\n    console.log(\"Trying to get Reserves between:\\n\" + coin1.address + \"\\n\" + coin2.address);\n\n    if (coin1.address && coin2.address) {\n      getReserves(coin1.address, coin2.address, props.network.factory, props.network.signer, props.network.account).then(data => setReserves(data));\n    }\n  }, [coin1.address, coin2.address, props.network.account, props.network.factory, props.network.router, props.network.signer]); // This hook is called when either of the state variables `field1Value` `coin1.address` or `coin2.address` change.\n  // It attempts to calculate and set the state variable `field2Value`\n  // This means that if the user types a new value into the conversion box or the conversion rate changes,\n  // the value in the output box will change.\n\n  useEffect(() => {\n    if (isNaN(parseFloat(field1Value))) {\n      setField2Value(\"\");\n    } else if (parseFloat(field1Value) && coin1.address && coin2.address) {\n      getAmountOut(coin1.address, coin2.address, field1Value, props.network.router, props.network.signer).then(amount => setField2Value(amount.toFixed(7))).catch(e => {\n        console.log(e);\n        setField2Value(\"NA\");\n      });\n    } else {\n      setField2Value(\"\");\n    }\n  }, [field1Value, coin1.address, coin2.address]); // This hook creates a timeout that will run every ~10 seconds, it's role is to check if the user's balance has\n  // updated has changed. This allows them to see when a transaction completes by looking at the balance output.\n\n  useEffect(() => {\n    const coinTimeout = setTimeout(() => {\n      console.log(\"props: \", props);\n      console.log(\"Checking balances...\");\n\n      if (coin1.address && coin2.address && props.network.account) {\n        getReserves(coin1.address, coin2.address, props.network.factory, props.network.signer, props.network.account).then(data => setReserves(data));\n      }\n\n      if (coin1.address && props.network.account && !wrongNetworkOpen) {\n        getBalanceAndSymbol(props.network.account, coin1.address, props.network.provider, props.network.signer, props.network.weth.address, props.network.coins).then(data => {\n          setCoin1({ ...coin1,\n            balance: data.balance\n          });\n        });\n      }\n\n      if (coin2.address && props.network.account && !wrongNetworkOpen) {\n        getBalanceAndSymbol(props.network.account, coin2.address, props.network.provider, props.network.signer, props.network.weth.address, props.network.coins).then(data => {\n          setCoin2({ ...coin2,\n            balance: data.balance\n          });\n        });\n      }\n    }, 10000);\n    return () => clearTimeout(coinTimeout);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(CoinDialog, {\n      open: dialog1Open,\n      onClose: onToken1Selected,\n      coins: props.network.coins,\n      props: props.network.signer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 384,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CoinDialog, {\n      open: dialog2Open,\n      onClose: onToken2Selected,\n      coins: props.network.coins,\n      signer: props.network.signer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 390,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(WrongNetwork, {\n      open: wrongNetworkOpen\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 396,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: \"xs\",\n      children: /*#__PURE__*/_jsxDEV(Paper, {\n        className: classes.paperContainer,\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          font: \"sans-serif\",\n          className: classes.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 401,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          direction: \"column\",\n          alignItems: \"center\",\n          spacing: 2,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            className: classes.fullWidth,\n            children: /*#__PURE__*/_jsxDEV(CoinField, {\n              activeField: true,\n              value: field1Value,\n              onClick: () => setDialog1Open(true),\n              onChange: handleChange.field1,\n              symbol: coin1.symbol !== undefined ? coin1.symbol : \"Select\",\n              className: classes.coinSelector\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 409,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 408,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n            onClick: switchFields,\n            className: classes.switchButton,\n            children: /*#__PURE__*/_jsxDEV(SwapVerticalCircleIcon, {\n              fontSize: \"medium\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 420,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 419,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            className: classes.fullWidth,\n            children: [/*#__PURE__*/_jsxDEV(CoinField, {\n              activeField: false,\n              value: field2Value,\n              onClick: () => setDialog2Open(true),\n              symbol: coin2.symbol !== undefined ? coin2.symbol : \"Select\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 424,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                className: classes.timevar1,\n                type: \"text\",\n                placeholder: \"Time horizon\",\n                onChange: e => getTimeHorizon(e)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 431,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                className: classes.timevar2,\n                type: \"text\",\n                placeholder: \"Frequency\",\n                onChange: e => getFrequency(e)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 437,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 430,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n              className: classes.hr\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 444,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 423,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            fontFamily: \"san-serif\",\n            children: \"Your Balances\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 448,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            direction: \"row\",\n            justifyContent: \"space-between\",\n            children: [/*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 6,\n              children: /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body1\",\n                className: classes.balance,\n                children: formatBalance(coin1.balance, coin1.symbol)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 453,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 452,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 6,\n              children: /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body1\",\n                className: classes.balance,\n                children: formatBalance(coin2.balance, coin2.symbol)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 458,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 457,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 451,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n            className: classes.hr\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 464,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            fontFamily: \"san-serif\",\n            children: \"Reserves\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 467,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            direction: \"row\",\n            justifyContent: \"space-between\",\n            children: [/*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 6,\n              children: /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body1\",\n                className: classes.balance,\n                children: formatReserve(reserves[0], coin1.symbol)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 472,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 471,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 6,\n              children: /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body1\",\n                className: classes.balance,\n                children: formatReserve(reserves[1], coin2.symbol)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 477,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 476,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 470,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n            className: classes.hr\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 483,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(LoadingButton, {\n            loading: loading,\n            valid: isButtonEnabled(),\n            success: false,\n            fail: false,\n            onClick: swap,\n            children: [/*#__PURE__*/_jsxDEV(LoopIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 492,\n              columnNumber: 15\n            }, this), \"Swap\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 485,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 407,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 400,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 399,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      className: classes.footer,\n      direction: \"row\",\n      justifyContent: \"center\",\n      alignItems: \"flex-end\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Alternative Uniswap Interface | Get AUT for use in the bakerloo testnet \", /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"https://faucet.bakerloo.autonity.network/\",\n          children: \"here\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 508,\n          columnNumber: 19\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 506,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 499,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 382,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CoinSwapper, \"d2sxbb23itHeV+SoSUrkY9gsd+E=\", false, function () {\n  return [useStyles, useSnackbar];\n});\n\n_c = CoinSwapper;\nexport default CoinSwapper;\n\nvar _c;\n\n$RefreshReg$(_c, \"CoinSwapper\");","map":{"version":3,"sources":["/Users/lelouch/Desktop/ethnyc/eth-nyc-global/uni/src/CoinSwapper/CoinSwapper.js"],"names":["React","useEffect","Container","Grid","IconButton","makeStyles","Paper","Typography","SwapVerticalCircleIcon","useSnackbar","LoopIcon","getAccount","getFactory","getProvider","getRouter","getSigner","getNetwork","getAmountOut","getBalanceAndSymbol","getWeth","swapTokens","getReserves","CoinField","CoinDialog","LoadingButton","WrongNetwork","COINS","chains","styles","theme","paperContainer","borderRadius","spacing","padding","paddingBottom","backgroundColor","fontFamily","switchButton","zIndex","margin","fullWidth","width","halfWidth","title","textAlign","marginBottom","hr","balance","overflow","footer","marginTop","timevar1","marginRight","height","border","shadowBox","timevar2","marginLeft","coinSelector","useStyles","CoinSwapper","props","classes","enqueueSnackbar","dialog1Open","setDialog1Open","useState","dialog2Open","setDialog2Open","wrongNetworkOpen","setwrongNetworkOpen","coin1","setCoin1","address","undefined","symbol","coin2","setCoin2","reserves","setReserves","field1Value","setField1Value","field2Value","setField2Value","loading","setLoading","switchFields","reverse","handleChange","field1","e","target","value","formatBalance","parseFloat","toPrecision","formatReserve","reserve","isButtonEnabled","parsedInput1","parsedInput2","isNaN","onToken1Selected","network","account","provider","signer","weth","coins","then","data","onToken2Selected","swap","console","log","router","variant","catch","message","autoHideDuration","getTimeHorizon","event","preventDefault","getFrequency","factory","amount","toFixed","coinTimeout","setTimeout","clearTimeout"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\nimport {\n  Container,\n  Grid,\n  IconButton,\n  makeStyles,\n  Paper,\n  Typography,\n} from \"@material-ui/core\";\nimport SwapVerticalCircleIcon from \"@material-ui/icons/SwapVerticalCircle\";\nimport { useSnackbar } from \"notistack\";\nimport LoopIcon from \"@material-ui/icons/Loop\";\nimport {\n  getAccount,\n  getFactory,\n  getProvider,\n  getRouter,\n  getSigner,\n  getNetwork,\n  getAmountOut,\n  getBalanceAndSymbol,\n  getWeth,\n  swapTokens,\n  getReserves,\n} from \"../ethereumFunctions\";\nimport CoinField from \"./CoinField\";\nimport CoinDialog from \"./CoinDialog\";\nimport LoadingButton from \"../Components/LoadingButton\";\nimport WrongNetwork from \"../Components/wrongNetwork\";\nimport COINS from \"../constants/coins\";\nimport * as chains from \"../constants/chains\";\n\nconst styles = (theme) => ({\n  paperContainer: {\n    borderRadius: theme.spacing(2),\n    padding: theme.spacing(1),\n    paddingBottom: theme.spacing(3),\n    backgroundColor: \"#D0D5E2\",\n    fontFamily: \"sans-serif\",\n  },\n  switchButton: {\n    zIndex: 1,\n    margin: \"-16px\",\n    padding: theme.spacing(0.5),\n  },\n  fullWidth: {\n    width: \"100%\",\n  },\n  halfWidth: {\n    width: \"50%\",\n  },\n  title: {\n    textAlign: \"center\",\n    padding: theme.spacing(0.5),\n    marginBottom: theme.spacing(1),\n  },\n  hr: {\n    width: \"100%\",\n  },\n  balance: {\n    padding: theme.spacing(1),\n    overflow: \"wrap\",\n    textAlign: \"center\",\n  },\n  footer: {\n    marginTop: \"285px\",\n  },\n  timevar1: {\n    marginTop: \"15px\",\n    backgroundColor: \"#FFFFFF\",\n    padding: \"10px\",\n    marginRight: \"5px\",\n    borderRadius: theme.spacing(2),\n    height: \"70px\",\n    border: \"0px\",\n    width: \"48.5%\",\n    shadowBox: \"None\",\n    fontFamily: \"sans-serif\",\n  },\n  timevar2: {\n    marginTop: \"15px\",\n    backgroundColor: \"#FFFFFF\",\n    padding: \"10px\",\n    marginLeft: \"5px\",\n    borderRadius: theme.spacing(2),\n    height: \"70px\",\n    border: \"0px\",\n    width: \"48.5%\",\n    shadowBox: \"None\",\n    fontFamily: \"sans-serif\",\n  },\n  coinSelector: {\n    backgroundColor: \"#FFFFFF\",\n  },\n});\n\nconst useStyles = makeStyles(styles);\n\nfunction CoinSwapper(props) {\n  const classes = useStyles();\n  const { enqueueSnackbar } = useSnackbar();\n\n  // Stores a record of whether their respective dialog window is open\n  const [dialog1Open, setDialog1Open] = React.useState(false);\n  const [dialog2Open, setDialog2Open] = React.useState(false);\n  const [wrongNetworkOpen, setwrongNetworkOpen] = React.useState(false);\n\n  // Stores data about their respective coin\n  const [coin1, setCoin1] = React.useState({\n    address: undefined,\n    symbol: undefined,\n    balance: undefined,\n  });\n  const [coin2, setCoin2] = React.useState({\n    address: undefined,\n    symbol: undefined,\n    balance: undefined,\n  });\n\n  // Stores the current reserves in the liquidity pool between coin1 and coin2\n  const [reserves, setReserves] = React.useState([\"0.0\", \"0.0\"]);\n\n  // Stores the current value of their respective text box\n  const [field1Value, setField1Value] = React.useState(\"\");\n  const [field2Value, setField2Value] = React.useState(\"\");\n\n  // Controls the loading button\n  const [loading, setLoading] = React.useState(false);\n\n  // Switches the top and bottom coins, this is called when users hit the swap button or select the opposite\n  // token in the dialog (e.g. if coin1 is TokenA and the user selects TokenB when choosing coin2)\n  const switchFields = () => {\n    setCoin1(coin2);\n    setCoin2(coin1);\n    setField1Value(field2Value);\n    setReserves(reserves.reverse());\n  };\n\n  // These functions take an HTML event, pull the data out and puts it into a state variable.\n  const handleChange = {\n    field1: (e) => {\n      setField1Value(e.target.value);\n    },\n  };\n\n  // Turns the account's balance into something nice and readable\n  const formatBalance = (balance, symbol) => {\n    if (balance && symbol)\n      return parseFloat(balance).toPrecision(8) + \" \" + symbol;\n    else return \"0.0\";\n  };\n\n  // Turns the coin's reserves into something nice and readable\n  const formatReserve = (reserve, symbol) => {\n    if (reserve && symbol) return reserve + \" \" + symbol;\n    else return \"0.0\";\n  };\n\n  // Determines whether the button should be enabled or not\n  const isButtonEnabled = () => {\n    // If both coins have been selected, and a valid float has been entered which is less than the user's balance, then return true\n    const parsedInput1 = parseFloat(field1Value);\n    const parsedInput2 = parseFloat(field2Value);\n    return (\n      coin1.address &&\n      coin2.address &&\n      !isNaN(parsedInput1) &&\n      !isNaN(parsedInput2) &&\n      0 < parsedInput1 &&\n      parsedInput1 <= coin1.balance\n    );\n  };\n\n  // Called when the dialog window for coin1 exits\n  const onToken1Selected = (address) => {\n    // Close the dialog window\n    setDialog1Open(false);\n\n    // If the user inputs the same token, we want to switch the data in the fields\n    if (address === coin2.address) {\n      switchFields();\n    }\n    // We only update the values if the user provides a token\n    else if (address) {\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\n      getBalanceAndSymbol(\n        props.network.account,\n        address,\n        props.network.provider,\n        props.network.signer,\n        props.network.weth.address,\n        props.network.coins\n      ).then((data) => {\n        setCoin1({\n          address: address,\n          symbol: data.symbol,\n          balance: data.balance,\n        });\n      });\n    }\n  };\n\n  // Called when the dialog window for coin2 exits\n  const onToken2Selected = (address) => {\n    // Close the dialog window\n    setDialog2Open(false);\n\n    // If the user inputs the same token, we want to switch the data in the fields\n    if (address === coin1.address) {\n      switchFields();\n    }\n    // We only update the values if the user provides a token\n    else if (address) {\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\n      getBalanceAndSymbol(\n        props.network.account,\n        address,\n        props.network.provider,\n        props.network.signer,\n        props.network.weth.address,\n        props.network.coins\n      ).then((data) => {\n        setCoin2({\n          address: address,\n          symbol: data.symbol,\n          balance: data.balance,\n        });\n      });\n    }\n  };\n\n  // Calls the swapTokens Ethereum function to make the swap, then resets nessicary state variables\n  const swap = () => {\n    console.log(\"Attempting to swap tokens...\");\n    setLoading(true);\n\n    swapTokens(\n      coin1.address,\n      coin2.address,\n      field1Value,\n      props.network.router,\n      props.network.account,\n      props.network.signer\n    )\n      .then(() => {\n        setLoading(false);\n\n        // If the transaction was successful, we clear to input to make sure the user doesn't accidental redo the transfer\n        setField1Value(\"\");\n        enqueueSnackbar(\"Transaction Successful\", { variant: \"success\" });\n      })\n      .catch((e) => {\n        setLoading(false);\n        enqueueSnackbar(\"Transaction Failed (\" + e.message + \")\", {\n          variant: \"error\",\n          autoHideDuration: 10000,\n        });\n      });\n  };\n\n  // The lambdas within these useEffects will be called when a particular dependency is updated. These dependencies\n  // are defined in the array of variables passed to the function after the lambda expression. If there are no dependencies\n  // the lambda will only ever be called when the component mounts. These are very useful for calculating new values\n  // after a particular state change, for example, calculating the new exchange rate whenever the addresses\n  // of the two coins change.\n\n  // This hook is called when either of the state variables `coin1.address` or `coin2.address` change.\n  // This means that when the user selects a different coin to convert between, or the coins are swapped,\n  // the new reserves will be calculated.\n\n  function getTimeHorizon(event) {\n    event.preventDefault();\n    console.log(event.target.value);\n  }\n\n  function getFrequency(event) {\n    event.preventDefault();\n    console.log(event.target.value);\n  }\n\n  useEffect(() => {\n    console.log(\n      \"Trying to get Reserves between:\\n\" + coin1.address + \"\\n\" + coin2.address\n    );\n\n    if (coin1.address && coin2.address) {\n      getReserves(\n        coin1.address,\n        coin2.address,\n        props.network.factory,\n        props.network.signer,\n        props.network.account\n      ).then((data) => setReserves(data));\n    }\n  }, [\n    coin1.address,\n    coin2.address,\n    props.network.account,\n    props.network.factory,\n    props.network.router,\n    props.network.signer,\n  ]);\n\n  // This hook is called when either of the state variables `field1Value` `coin1.address` or `coin2.address` change.\n  // It attempts to calculate and set the state variable `field2Value`\n  // This means that if the user types a new value into the conversion box or the conversion rate changes,\n  // the value in the output box will change.\n  useEffect(() => {\n    if (isNaN(parseFloat(field1Value))) {\n      setField2Value(\"\");\n    } else if (parseFloat(field1Value) && coin1.address && coin2.address) {\n      getAmountOut(\n        coin1.address,\n        coin2.address,\n        field1Value,\n        props.network.router,\n        props.network.signer\n      )\n        .then((amount) => setField2Value(amount.toFixed(7)))\n        .catch((e) => {\n          console.log(e);\n          setField2Value(\"NA\");\n        });\n    } else {\n      setField2Value(\"\");\n    }\n  }, [field1Value, coin1.address, coin2.address]);\n\n  // This hook creates a timeout that will run every ~10 seconds, it's role is to check if the user's balance has\n  // updated has changed. This allows them to see when a transaction completes by looking at the balance output.\n  useEffect(() => {\n    const coinTimeout = setTimeout(() => {\n      console.log(\"props: \", props);\n      console.log(\"Checking balances...\");\n\n      if (coin1.address && coin2.address && props.network.account) {\n        getReserves(\n          coin1.address,\n          coin2.address,\n          props.network.factory,\n          props.network.signer,\n          props.network.account\n        ).then((data) => setReserves(data));\n      }\n\n      if (coin1.address && props.network.account && !wrongNetworkOpen) {\n        getBalanceAndSymbol(\n          props.network.account,\n          coin1.address,\n          props.network.provider,\n          props.network.signer,\n          props.network.weth.address,\n          props.network.coins\n        ).then((data) => {\n          setCoin1({\n            ...coin1,\n            balance: data.balance,\n          });\n        });\n      }\n      if (coin2.address && props.network.account && !wrongNetworkOpen) {\n        getBalanceAndSymbol(\n          props.network.account,\n          coin2.address,\n          props.network.provider,\n          props.network.signer,\n          props.network.weth.address,\n          props.network.coins\n        ).then((data) => {\n          setCoin2({\n            ...coin2,\n            balance: data.balance,\n          });\n        });\n      }\n    }, 10000);\n\n    return () => clearTimeout(coinTimeout);\n  });\n\n  return (\n    <div>\n      {/* Dialog Windows */}\n      <CoinDialog\n        open={dialog1Open}\n        onClose={onToken1Selected}\n        coins={props.network.coins}\n        props={props.network.signer}\n      />\n      <CoinDialog\n        open={dialog2Open}\n        onClose={onToken2Selected}\n        coins={props.network.coins}\n        signer={props.network.signer}\n      />\n      <WrongNetwork open={wrongNetworkOpen} />\n\n      {/* Coin Swapper */}\n      <Container maxWidth=\"xs\">\n        <Paper className={classes.paperContainer}>\n          <Typography\n            variant=\"h6\"\n            font=\"sans-serif\"\n            className={classes.title}\n          ></Typography>\n\n          <Grid container direction=\"column\" alignItems=\"center\" spacing={2}>\n            <Grid item xs={12} className={classes.fullWidth}>\n              <CoinField\n                activeField={true}\n                value={field1Value}\n                onClick={() => setDialog1Open(true)}\n                onChange={handleChange.field1}\n                symbol={coin1.symbol !== undefined ? coin1.symbol : \"Select\"}\n                className={classes.coinSelector}\n              />\n            </Grid>\n\n            <IconButton onClick={switchFields} className={classes.switchButton}>\n              <SwapVerticalCircleIcon fontSize=\"medium\" />\n            </IconButton>\n\n            <Grid item xs={12} className={classes.fullWidth}>\n              <CoinField\n                activeField={false}\n                value={field2Value}\n                onClick={() => setDialog2Open(true)}\n                symbol={coin2.symbol !== undefined ? coin2.symbol : \"Select\"}\n              />\n              <div>\n                <input\n                  className={classes.timevar1}\n                  type=\"text\"\n                  placeholder=\"Time horizon\"\n                  onChange={(e) => getTimeHorizon(e)}\n                />\n                <input\n                  className={classes.timevar2}\n                  type=\"text\"\n                  placeholder=\"Frequency\"\n                  onChange={(e) => getFrequency(e)}\n                />\n              </div>\n              <hr className={classes.hr} />\n            </Grid>\n\n            {/* Balance Display */}\n            <Typography variant=\"h6\" fontFamily=\"san-serif\">\n              Your Balances\n            </Typography>\n            <Grid container direction=\"row\" justifyContent=\"space-between\">\n              <Grid item xs={6}>\n                <Typography variant=\"body1\" className={classes.balance}>\n                  {formatBalance(coin1.balance, coin1.symbol)}\n                </Typography>\n              </Grid>\n              <Grid item xs={6}>\n                <Typography variant=\"body1\" className={classes.balance}>\n                  {formatBalance(coin2.balance, coin2.symbol)}\n                </Typography>\n              </Grid>\n            </Grid>\n\n            <hr className={classes.hr} />\n\n            {/* Reserves Display */}\n            <Typography variant=\"h6\" fontFamily=\"san-serif\">\n              Reserves\n            </Typography>\n            <Grid container direction=\"row\" justifyContent=\"space-between\">\n              <Grid item xs={6}>\n                <Typography variant=\"body1\" className={classes.balance}>\n                  {formatReserve(reserves[0], coin1.symbol)}\n                </Typography>\n              </Grid>\n              <Grid item xs={6}>\n                <Typography variant=\"body1\" className={classes.balance}>\n                  {formatReserve(reserves[1], coin2.symbol)}\n                </Typography>\n              </Grid>\n            </Grid>\n\n            <hr className={classes.hr} />\n\n            <LoadingButton\n              loading={loading}\n              valid={isButtonEnabled()}\n              success={false}\n              fail={false}\n              onClick={swap}\n            >\n              <LoopIcon />\n              Swap\n            </LoadingButton>\n          </Grid>\n        </Paper>\n      </Container>\n\n      <Grid\n        container\n        className={classes.footer}\n        direction=\"row\"\n        justifyContent=\"center\"\n        alignItems=\"flex-end\"\n      >\n        <p>\n          Alternative Uniswap Interface | Get AUT for use in the bakerloo\n          testnet <a href=\"https://faucet.bakerloo.autonity.network/\">here</a>\n        </p>\n      </Grid>\n    </div>\n  );\n}\n\nexport default CoinSwapper;\n"]},"metadata":{},"sourceType":"module"}