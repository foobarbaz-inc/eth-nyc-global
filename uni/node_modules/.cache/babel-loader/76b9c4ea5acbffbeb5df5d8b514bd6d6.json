{"ast":null,"code":"var _jsxFileName = \"/Users/lelouch/Desktop/ethnyc/eth-nyc-global/uni/src/Liquidity/LiquidityDeployer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport { Grid, makeStyles, Paper, Typography } from \"@material-ui/core\";\nimport AccountBalanceIcon from \"@material-ui/icons/AccountBalance\";\nimport { useSnackbar } from \"notistack\";\nimport { getBalanceAndSymbol, getReserves } from \"../ethereumFunctions\";\nimport { addLiquidity, quoteAddLiquidity } from \"./LiquidityFunctions\";\nimport CoinField from \"../CoinSwapper/CoinField\";\nimport CoinDialog from \"../CoinSwapper/CoinDialog\";\nimport LoadingButton from \"../Components/LoadingButton\";\nimport WrongNetwork from \"../Components/wrongNetwork\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst styles = theme => ({\n  paperContainer: {\n    borderRadius: theme.spacing(2),\n    padding: theme.spacing(2),\n    paddingBottom: theme.spacing(3),\n    width: \"40%\",\n    overflow: \"wrap\",\n    background: \"linear-gradient(45deg, #ff0000 30%, #FF8E53 90%)\",\n    color: \"white\"\n  },\n  fullWidth: {\n    width: \"100%\"\n  },\n  values: {\n    width: \"50%\"\n  },\n  title: {\n    textAlign: \"center\",\n    padding: theme.spacing(0.5),\n    marginBottom: theme.spacing(1)\n  },\n  hr: {\n    width: \"100%\"\n  },\n  balance: {\n    padding: theme.spacing(1),\n    overflow: \"wrap\",\n    textAlign: \"center\"\n  },\n  buttonIcon: {\n    marginRight: theme.spacing(1),\n    padding: theme.spacing(0.4)\n  }\n});\n\nconst useStyles = makeStyles(styles);\n\nfunction LiquidityDeployer(props) {\n  _s();\n\n  const classes = useStyles();\n  const {\n    enqueueSnackbar\n  } = useSnackbar(); // Stores a record of whether their respective dialog window is open\n\n  const [dialog1Open, setDialog1Open] = React.useState(false);\n  const [dialog2Open, setDialog2Open] = React.useState(false);\n  const [wrongNetworkOpen, setwrongNetworkOpen] = React.useState(false); // Stores data about their respective coin\n\n  const [coin1, setCoin1] = React.useState({\n    address: undefined,\n    symbol: undefined,\n    balance: undefined\n  });\n  const [coin2, setCoin2] = React.useState({\n    address: undefined,\n    symbol: undefined,\n    balance: undefined\n  }); // Stores the current reserves in the liquidity pool between coin1 and coin2\n\n  const [reserves, setReserves] = React.useState([\"0.0\", \"0.0\"]); // Stores the current value of their respective text box\n\n  const [field1Value, setField1Value] = React.useState(\"\");\n  const [field2Value, setField2Value] = React.useState(\"\"); // Controls the loading button\n\n  const [loading, setLoading] = React.useState(false); // Stores the user's balance of liquidity tokens for the current pair\n\n  const [liquidityTokens, setLiquidityTokens] = React.useState(\"\"); // Used when getting a quote of liquidity\n\n  const [liquidityOut, setLiquidityOut] = React.useState([0, 0, 0]); // Switches the top and bottom coins, this is called when users hit the swap button or select the opposite\n  // token in the dialog (e.g. if coin1 is TokenA and the user selects TokenB when choosing coin2)\n\n  const switchFields = () => {\n    let oldField1Value = field1Value;\n    let oldField2Value = field2Value;\n    setCoin1(coin2);\n    setCoin2(coin1);\n    setField1Value(oldField2Value);\n    setField2Value(oldField1Value);\n    setReserves(reserves.reverse());\n  }; // These functions take an HTML event, pull the data out and puts it into a state variable.\n\n\n  const handleChange = {\n    field1: e => {\n      setField1Value(e.target.value);\n    },\n    field2: e => {\n      setField2Value(e.target.value);\n    }\n  }; // Turns the account's balance into something nice and readable\n\n  const formatBalance = (balance, symbol) => {\n    if (balance && symbol) return parseFloat(balance).toPrecision(8) + \" \" + symbol;else return \"0.0\";\n  }; // Turns the coin's reserves into something nice and readable\n\n\n  const formatReserve = (reserve, symbol) => {\n    if (reserve && symbol) return reserve + \" \" + symbol;else return \"0.0\";\n  }; // Determines whether the button should be enabled or not\n\n\n  const isButtonEnabled = () => {\n    // If both coins have been selected, and a valid float has been entered for both, which are less than the user's balances, then return true\n    const parsedInput1 = parseFloat(field1Value);\n    const parsedInput2 = parseFloat(field2Value);\n    return coin1.address && coin2.address && parsedInput1 !== NaN && 0 < parsedInput1 && parsedInput2 !== NaN && 0 < parsedInput2 && parsedInput1 <= coin1.balance && parsedInput2 <= coin2.balance;\n  };\n\n  const deploy = () => {\n    console.log(\"Attempting to deploy liquidity...\");\n    setLoading(true);\n    addLiquidity(coin1.address, coin2.address, field1Value, field2Value, '0', '0', props.network.router, props.network.account, props.network.signer).then(() => {\n      setLoading(false); // If the transaction was successful, we clear to input to make sure the user doesn't accidental redo the transfer\n\n      setField1Value(\"\");\n      setField2Value(\"\");\n      enqueueSnackbar(\"Deployment Successful\", {\n        variant: \"success\"\n      });\n    }).catch(e => {\n      setLoading(false);\n      enqueueSnackbar(\"Deployment Failed (\" + e.message + \")\", {\n        variant: \"error\",\n        autoHideDuration: 10000\n      });\n    });\n  }; // Called when the dialog window for coin1 exits\n\n\n  const onToken1Selected = address => {\n    // Close the dialog window\n    setDialog1Open(false); // If the user inputs the same token, we want to switch the data in the fields\n\n    if (address === coin2.address) {\n      switchFields();\n    } // We only update the values if the user provides a token\n    else if (address) {\n        // Getting some token data is async, so we need to wait for the data to return, hence the promise\n        getBalanceAndSymbol(props.network.account, address, props.network.provider, props.network.signer, props.network.weth.address, props.network.coins).then(data => {\n          setCoin1({\n            address: address,\n            symbol: data.symbol,\n            balance: data.balance\n          });\n        });\n      }\n  }; // Called when the dialog window for coin2 exits\n\n\n  const onToken2Selected = address => {\n    // Close the dialog window\n    setDialog2Open(false); // If the user inputs the same token, we want to switch the data in the fields\n\n    if (address === coin1.address) {\n      switchFields();\n    } // We only update the values if the user provides a token\n    else if (address) {\n        // Getting some token data is async, so we need to wait for the data to return, hence the promise\n        getBalanceAndSymbol(props.network.account, address, props.network.provider, props.network.signer, props.network.weth.address, props.network.coins).then(data => {\n          setCoin2({\n            address: address,\n            symbol: data.symbol,\n            balance: data.balance\n          });\n        });\n      }\n  }; // This hook is called when either of the state variables `coin1.address` or `coin2.address` change.\n  // This means that when the user selects a different coin to convert between, or the coins are swapped,\n  // the new reserves will be calculated.\n\n\n  useEffect(() => {\n    console.log(\"Trying to get reserves between:\\n\" + coin1.address + \"\\n\" + coin2.address);\n\n    if (coin1.address && coin2.address && props.network.account) {\n      getReserves(coin1.address, coin2.address, props.network.factory, props.network.signer, props.network.account).then(data => {\n        setReserves([data[0], data[1]]);\n        setLiquidityTokens(data[2]);\n      });\n    }\n  }, [coin1.address, coin2.address, props.network.account, props.network.factory, props.network.signer]); // This hook is called when either of the state variables `field1Value`, `field2Value`, `coin1.address` or `coin2.address` change.\n  // It will give a preview of the liquidity deployment.\n\n  useEffect(() => {\n    if (isButtonEnabled()) {\n      console.log(\"Trying to preview the liquidity deployment\");\n      quoteAddLiquidity(coin1.address, coin2.address, field1Value, field2Value, props.network.factory, props.network.signer).then(data => {\n        // console.log(data);\n        console.log(\"TokenA in: \", data[0]);\n        console.log(\"TokenB in: \", data[1]);\n        console.log(\"Liquidity out: \", data[2]);\n        setLiquidityOut([data[0], data[1], data[2]]);\n      });\n    }\n  }, [coin1.address, coin2.address, field1Value, field2Value, props.network.factory, props.network.signer]); // This hook creates a timeout that will run every ~10 seconds, it's role is to check if the user's balance has\n  // updated has changed. This allows them to see when a transaction completes by looking at the balance output.\n\n  useEffect(() => {\n    const coinTimeout = setTimeout(() => {\n      console.log(\"Checking balances & Getting reserves...\");\n\n      if (coin1.address && coin2.address && props.network.account) {\n        getReserves(coin1.address, coin2.address, props.network.factory, props.network.signer, props.network.account).then(data => {\n          setReserves([data[0], data[1]]);\n          setLiquidityTokens(data[2]);\n        });\n      }\n\n      if (coin1.address && props.network.account && !wrongNetworkOpen) {\n        getBalanceAndSymbol(props.network.account, coin1.address, props.network.provider, props.network.signer, props.network.weth.address, props.network.coins).then(data => {\n          setCoin1({ ...coin1,\n            balance: data.balance\n          });\n        });\n      }\n\n      if (coin2.address && props.network.account && !wrongNetworkOpen) {\n        getBalanceAndSymbol(props.network.account, coin2.address, props.network.provider, props.network.signer, props.network.weth.address, props.network.coins).then(data => {\n          setCoin2({ ...coin2,\n            balance: data.balance\n          });\n        });\n      }\n    }, 10000);\n    return () => clearTimeout(coinTimeout);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h5\",\n      className: classes.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 344,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CoinDialog, {\n      open: dialog1Open,\n      onClose: onToken1Selected,\n      coins: props.network.coins,\n      signer: props.network.signer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 347,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CoinDialog, {\n      open: dialog2Open,\n      onClose: onToken2Selected,\n      coins: props.network.coins,\n      signer: props.networksigner\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 353,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(WrongNetwork, {\n      open: wrongNetworkOpen\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 359,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      direction: \"column\",\n      alignItems: \"center\",\n      spacing: 2,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        className: classes.fullWidth,\n        children: /*#__PURE__*/_jsxDEV(CoinField, {\n          activeField: true,\n          value: field1Value,\n          onClick: () => setDialog1Open(true),\n          onChange: handleChange.field1,\n          symbol: coin1.symbol !== undefined ? coin1.symbol : \"Select\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 365,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 364,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        className: classes.fullWidth,\n        children: /*#__PURE__*/_jsxDEV(CoinField, {\n          activeField: true,\n          value: field2Value,\n          onClick: () => setDialog2Open(true),\n          onChange: handleChange.field2,\n          symbol: coin2.symbol !== undefined ? coin2.symbol : \"Select\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 375,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 374,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      direction: \"row\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      spacing: 4,\n      className: classes.balance,\n      children: [/*#__PURE__*/_jsxDEV(\"hr\", {\n        className: classes.hr\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 393,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        item: true,\n        className: classes.values,\n        direction: \"column\",\n        alignItems: \"center\",\n        spacing: 2,\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          children: \"Your Balances\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 403,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          direction: \"row\",\n          justifyContent: \"space-between\",\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 6,\n            children: /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body1\",\n              className: classes.balance,\n              children: formatBalance(coin1.balance, coin1.symbol)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 406,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 405,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 6,\n            children: /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body1\",\n              className: classes.balance,\n              children: formatBalance(coin2.balance, coin2.symbol)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 411,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 410,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 404,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n          className: classes.hr\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 417,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          children: \"Reserves\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 420,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          direction: \"row\",\n          justifyContent: \"space-between\",\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 6,\n            children: /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body1\",\n              className: classes.balance,\n              children: formatReserve(reserves[0], coin1.symbol)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 423,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 422,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 6,\n            children: /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body1\",\n              className: classes.balance,\n              children: formatReserve(reserves[1], coin2.symbol)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 428,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 427,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 421,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n          className: classes.hr\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 434,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          children: \"Your Liquidity Pool Tokens\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 437,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          direction: \"row\",\n          justifyContent: \"center\",\n          children: /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 6,\n            children: /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body1\",\n              className: classes.balance,\n              children: formatReserve(liquidityTokens, \"UNI-V2\")\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 440,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 439,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 438,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Paper, {\n        className: classes.paperContainer,\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          item: true,\n          direction: \"column\",\n          alignItems: \"center\",\n          spacing: 2,\n          className: classes.fullWidth,\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            children: \"Tokens in\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 457,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            direction: \"row\",\n            justifyContent: \"space-between\",\n            children: [/*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 6,\n              children: /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body1\",\n                className: classes.balance,\n                children: formatBalance(liquidityOut[0], coin1.symbol)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 460,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 459,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 6,\n              children: /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body1\",\n                className: classes.balance,\n                children: formatBalance(liquidityOut[1], coin2.symbol)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 465,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 464,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 458,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n            className: classes.hr\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 471,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            children: \"Liquidity Pool Tokens Out\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 474,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            direction: \"row\",\n            justifyContent: \"center\",\n            children: /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 6,\n              children: /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body1\",\n                className: classes.balance,\n                children: formatReserve(liquidityOut[2], \"UNI-V2\")\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 477,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 476,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 475,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 448,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 446,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: classes.hr\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 485,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 385,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      direction: \"column\",\n      alignItems: \"center\",\n      spacing: 2,\n      children: /*#__PURE__*/_jsxDEV(LoadingButton, {\n        loading: loading,\n        valid: isButtonEnabled(),\n        success: false,\n        fail: false,\n        onClick: deploy,\n        children: [/*#__PURE__*/_jsxDEV(AccountBalanceIcon, {\n          className: classes.buttonIcon\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 495,\n          columnNumber: 11\n        }, this), \"Deploy\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 488,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 487,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 342,\n    columnNumber: 5\n  }, this);\n}\n\n_s(LiquidityDeployer, \"ppFDwpDz8eZ/5fJVQCT3MTtSIdQ=\", false, function () {\n  return [useStyles, useSnackbar];\n});\n\n_c = LiquidityDeployer;\nexport default LiquidityDeployer;\n\nvar _c;\n\n$RefreshReg$(_c, \"LiquidityDeployer\");","map":{"version":3,"sources":["/Users/lelouch/Desktop/ethnyc/eth-nyc-global/uni/src/Liquidity/LiquidityDeployer.js"],"names":["React","useEffect","Grid","makeStyles","Paper","Typography","AccountBalanceIcon","useSnackbar","getBalanceAndSymbol","getReserves","addLiquidity","quoteAddLiquidity","CoinField","CoinDialog","LoadingButton","WrongNetwork","styles","theme","paperContainer","borderRadius","spacing","padding","paddingBottom","width","overflow","background","color","fullWidth","values","title","textAlign","marginBottom","hr","balance","buttonIcon","marginRight","useStyles","LiquidityDeployer","props","classes","enqueueSnackbar","dialog1Open","setDialog1Open","useState","dialog2Open","setDialog2Open","wrongNetworkOpen","setwrongNetworkOpen","coin1","setCoin1","address","undefined","symbol","coin2","setCoin2","reserves","setReserves","field1Value","setField1Value","field2Value","setField2Value","loading","setLoading","liquidityTokens","setLiquidityTokens","liquidityOut","setLiquidityOut","switchFields","oldField1Value","oldField2Value","reverse","handleChange","field1","e","target","value","field2","formatBalance","parseFloat","toPrecision","formatReserve","reserve","isButtonEnabled","parsedInput1","parsedInput2","NaN","deploy","console","log","network","router","account","signer","then","variant","catch","message","autoHideDuration","onToken1Selected","provider","weth","coins","data","onToken2Selected","factory","coinTimeout","setTimeout","clearTimeout","networksigner"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\nimport { Grid, makeStyles, Paper, Typography } from \"@material-ui/core\";\nimport AccountBalanceIcon from \"@material-ui/icons/AccountBalance\";\nimport { useSnackbar } from \"notistack\";\nimport {\n  getBalanceAndSymbol,\n  getReserves,\n} from \"../ethereumFunctions\";\n\nimport { addLiquidity, quoteAddLiquidity } from \"./LiquidityFunctions\";\n\nimport CoinField from \"../CoinSwapper/CoinField\";\nimport CoinDialog from \"../CoinSwapper/CoinDialog\";\nimport LoadingButton from \"../Components/LoadingButton\";\nimport WrongNetwork from \"../Components/wrongNetwork\";\n\nconst styles = (theme) => ({\n  paperContainer: {\n    borderRadius: theme.spacing(2),\n    padding: theme.spacing(2),\n    paddingBottom: theme.spacing(3),\n    width: \"40%\",\n    overflow: \"wrap\",\n    background: \"linear-gradient(45deg, #ff0000 30%, #FF8E53 90%)\",\n    color: \"white\",\n  },\n  fullWidth: {\n    width: \"100%\",\n  },\n  values: {\n    width: \"50%\",\n  },\n  title: {\n    textAlign: \"center\",\n    padding: theme.spacing(0.5),\n    marginBottom: theme.spacing(1),\n  },\n  hr: {\n    width: \"100%\",\n  },\n  balance: {\n    padding: theme.spacing(1),\n    overflow: \"wrap\",\n    textAlign: \"center\",\n  },\n  buttonIcon: {\n    marginRight: theme.spacing(1),\n    padding: theme.spacing(0.4),\n  },\n});\n\nconst useStyles = makeStyles(styles);\n\nfunction LiquidityDeployer(props) {\n  const classes = useStyles();\n  const { enqueueSnackbar } = useSnackbar();\n\n  // Stores a record of whether their respective dialog window is open\n  const [dialog1Open, setDialog1Open] = React.useState(false);\n  const [dialog2Open, setDialog2Open] = React.useState(false);\n  const [wrongNetworkOpen, setwrongNetworkOpen] = React.useState(false);\n\n  // Stores data about their respective coin\n  const [coin1, setCoin1] = React.useState({\n    address: undefined,\n    symbol: undefined,\n    balance: undefined,\n  });\n  const [coin2, setCoin2] = React.useState({\n    address: undefined,\n    symbol: undefined,\n    balance: undefined,\n  });\n\n  // Stores the current reserves in the liquidity pool between coin1 and coin2\n  const [reserves, setReserves] = React.useState([\"0.0\", \"0.0\"]);\n\n  // Stores the current value of their respective text box\n  const [field1Value, setField1Value] = React.useState(\"\");\n  const [field2Value, setField2Value] = React.useState(\"\");\n\n  // Controls the loading button\n  const [loading, setLoading] = React.useState(false);\n\n  // Stores the user's balance of liquidity tokens for the current pair\n  const [liquidityTokens, setLiquidityTokens] = React.useState(\"\");\n\n  // Used when getting a quote of liquidity\n  const [liquidityOut, setLiquidityOut] = React.useState([0, 0, 0]);\n\n  // Switches the top and bottom coins, this is called when users hit the swap button or select the opposite\n  // token in the dialog (e.g. if coin1 is TokenA and the user selects TokenB when choosing coin2)\n  const switchFields = () => {\n    let oldField1Value = field1Value;\n    let oldField2Value = field2Value;\n\n    setCoin1(coin2);\n    setCoin2(coin1);\n    setField1Value(oldField2Value);\n    setField2Value(oldField1Value);\n    setReserves(reserves.reverse());\n  };\n\n  // These functions take an HTML event, pull the data out and puts it into a state variable.\n  const handleChange = {\n    field1: (e) => {\n      setField1Value(e.target.value);\n    },\n    field2: (e) => {\n      setField2Value(e.target.value);\n    },\n  };\n\n  // Turns the account's balance into something nice and readable\n  const formatBalance = (balance, symbol) => {\n    if (balance && symbol)\n      return parseFloat(balance).toPrecision(8) + \" \" + symbol;\n    else return \"0.0\";\n  };\n\n  // Turns the coin's reserves into something nice and readable\n  const formatReserve = (reserve, symbol) => {\n    if (reserve && symbol) return reserve + \" \" + symbol;\n    else return \"0.0\";\n  };\n\n  // Determines whether the button should be enabled or not\n  const isButtonEnabled = () => {\n\n    // If both coins have been selected, and a valid float has been entered for both, which are less than the user's balances, then return true\n    const parsedInput1 = parseFloat(field1Value);\n    const parsedInput2 = parseFloat(field2Value);\n    return (\n      coin1.address &&\n      coin2.address &&\n      parsedInput1 !== NaN &&\n      0 < parsedInput1 &&\n      parsedInput2 !== NaN &&\n      0 < parsedInput2 &&\n      parsedInput1 <= coin1.balance &&\n      parsedInput2 <= coin2.balance\n    );\n  };\n\n\n\n  const deploy = () => {\n    console.log(\"Attempting to deploy liquidity...\");\n    setLoading(true);\n\n    addLiquidity(\n      coin1.address,\n      coin2.address,\n      field1Value,\n      field2Value,\n      '0',\n      '0',\n      props.network.router,\n      props.network.account,\n      props.network.signer\n    )\n      .then(() => {\n        setLoading(false);\n\n        // If the transaction was successful, we clear to input to make sure the user doesn't accidental redo the transfer\n        setField1Value(\"\");\n        setField2Value(\"\");\n        enqueueSnackbar(\"Deployment Successful\", { variant: \"success\" });\n      })\n      .catch((e) => {\n        setLoading(false);\n        enqueueSnackbar(\"Deployment Failed (\" + e.message + \")\", {\n          variant: \"error\",\n          autoHideDuration: 10000,\n        });\n      });\n  };\n\n  // Called when the dialog window for coin1 exits\n  const onToken1Selected = (address) => {\n    // Close the dialog window\n    setDialog1Open(false);\n\n    // If the user inputs the same token, we want to switch the data in the fields\n    if (address === coin2.address) {\n      switchFields();\n    }\n    // We only update the values if the user provides a token\n    else if (address) {\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\n      getBalanceAndSymbol(\n        props.network.account,\n        address,\n        props.network.provider,\n        props.network.signer,\n        props.network.weth.address,\n        props.network.coins\n        ).then((data) => {\n        setCoin1({\n          address: address,\n          symbol: data.symbol,\n          balance: data.balance,\n        });\n      });\n    }\n  };\n\n  // Called when the dialog window for coin2 exits\n  const onToken2Selected = (address) => {\n    // Close the dialog window\n    setDialog2Open(false);\n\n    // If the user inputs the same token, we want to switch the data in the fields\n    if (address === coin1.address) {\n      switchFields();\n    }\n    // We only update the values if the user provides a token\n    else if (address) {\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\n      getBalanceAndSymbol(props.network.account,\n        address,\n        props.network.provider,\n        props.network.signer,\n        props.network.weth.address,\n        props.network.coins\n        ).then((data) => {\n        setCoin2({\n          address: address,\n          symbol: data.symbol,\n          balance: data.balance,\n        });\n      });\n    }\n  };\n\n  // This hook is called when either of the state variables `coin1.address` or `coin2.address` change.\n  // This means that when the user selects a different coin to convert between, or the coins are swapped,\n  // the new reserves will be calculated.\n  useEffect(() => {\n    console.log(\n      \"Trying to get reserves between:\\n\" + coin1.address + \"\\n\" + coin2.address\n    );\n\n    if (coin1.address && coin2.address && props.network.account) {\n      getReserves(\n        coin1.address,\n        coin2.address,\n        props.network.factory,\n        props.network.signer,\n        props.network.account\n        ).then(\n        (data) => {\n          setReserves([data[0], data[1]]);\n          setLiquidityTokens(data[2]);\n        }\n      );\n    }\n  }, [coin1.address, coin2.address, props.network.account, props.network.factory, props.network.signer]);\n\n  // This hook is called when either of the state variables `field1Value`, `field2Value`, `coin1.address` or `coin2.address` change.\n  // It will give a preview of the liquidity deployment.\n  useEffect(() => {\n    if (isButtonEnabled()) {\n      console.log(\"Trying to preview the liquidity deployment\");\n\n      quoteAddLiquidity(\n        coin1.address,\n        coin2.address,\n        field1Value,\n        field2Value,\n        props.network.factory,\n        props.network.signer\n      ).then((data) => {\n        // console.log(data);\n        console.log(\"TokenA in: \", data[0]);\n        console.log(\"TokenB in: \", data[1]);\n        console.log(\"Liquidity out: \", data[2]);\n        setLiquidityOut([data[0], data[1], data[2]]);\n      });\n    }\n  }, [coin1.address, coin2.address, field1Value, field2Value, props.network.factory, props.network.signer]);\n\n  // This hook creates a timeout that will run every ~10 seconds, it's role is to check if the user's balance has\n  // updated has changed. This allows them to see when a transaction completes by looking at the balance output.\n  useEffect(() => {\n    const coinTimeout = setTimeout(() => {\n      console.log(\"Checking balances & Getting reserves...\");\n\n      if (coin1.address && coin2.address && props.network.account) {\n        getReserves(\n          coin1.address,\n          coin2.address,\n          props.network.factory,\n          props.network.signer,\n          props.network.account\n        ).then((data) => {\n          setReserves([data[0], data[1]]);\n          setLiquidityTokens(data[2]);\n        });\n      }\n\n      if (coin1.address && props.network.account &&!wrongNetworkOpen) {\n        getBalanceAndSymbol(\n          props.network.account,\n          coin1.address,\n          props.network.provider,\n          props.network.signer,\n          props.network.weth.address,\n          props.network.coins\n          ).then(\n          (data) => {\n            setCoin1({\n              ...coin1,\n              balance: data.balance,\n            });\n          }\n        );\n      }\n      if (coin2.address && props.network.account &&!wrongNetworkOpen) {\n        getBalanceAndSymbol(\n          props.network.account,\n          coin2.address,\n          props.network.provider,\n          props.network.signer,\n          props.network.weth.address,\n          props.network.coins\n          ).then(\n          (data) => {\n            setCoin2({\n              ...coin2,\n              balance: data.balance,\n            });\n          }\n        );\n      }\n    }, 10000);\n\n    return () => clearTimeout(coinTimeout);\n  });\n\n  return (\n    <div>\n      {/* Liquidity deployer */}\n      <Typography variant=\"h5\" className={classes.title}></Typography>\n\n      {/* Dialog Windows */}\n      <CoinDialog\n        open={dialog1Open}\n        onClose={onToken1Selected}\n        coins={props.network.coins}\n        signer={props.network.signer}\n      />\n      <CoinDialog\n        open={dialog2Open}\n        onClose={onToken2Selected}\n        coins={props.network.coins}\n        signer={props.networksigner}\n      />\n      <WrongNetwork\n        open={wrongNetworkOpen}\n      />\n\n      <Grid container direction=\"column\" alignItems=\"center\" spacing={2}>\n        <Grid item xs={12} className={classes.fullWidth}>\n          <CoinField\n            activeField={true}\n            value={field1Value}\n            onClick={() => setDialog1Open(true)}\n            onChange={handleChange.field1}\n            symbol={coin1.symbol !== undefined ? coin1.symbol : \"Select\"}\n          />\n        </Grid>\n\n        <Grid item xs={12} className={classes.fullWidth}>\n          <CoinField\n            activeField={true}\n            value={field2Value}\n            onClick={() => setDialog2Open(true)}\n            onChange={handleChange.field2}\n            symbol={coin2.symbol !== undefined ? coin2.symbol : \"Select\"}\n          />\n        </Grid>\n      </Grid>\n\n      <Grid\n        container\n        direction=\"row\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        spacing={4}\n        className={classes.balance}\n      >\n        <hr className={classes.hr} />\n        <Grid\n          container\n          item\n          className={classes.values}\n          direction=\"column\"\n          alignItems=\"center\"\n          spacing={2}\n        >\n          {/* Balance Display */}\n          <Typography variant=\"h6\">Your Balances</Typography>\n          <Grid container direction=\"row\" justifyContent=\"space-between\">\n            <Grid item xs={6}>\n              <Typography variant=\"body1\" className={classes.balance}>\n                {formatBalance(coin1.balance, coin1.symbol)}\n              </Typography>\n            </Grid>\n            <Grid item xs={6}>\n              <Typography variant=\"body1\" className={classes.balance}>\n                {formatBalance(coin2.balance, coin2.symbol)}\n              </Typography>\n            </Grid>\n          </Grid>\n\n          <hr className={classes.hr} />\n\n          {/* Reserves Display */}\n          <Typography variant=\"h6\">Reserves</Typography>\n          <Grid container direction=\"row\" justifyContent=\"space-between\">\n            <Grid item xs={6}>\n              <Typography variant=\"body1\" className={classes.balance}>\n                {formatReserve(reserves[0], coin1.symbol)}\n              </Typography>\n            </Grid>\n            <Grid item xs={6}>\n              <Typography variant=\"body1\" className={classes.balance}>\n                {formatReserve(reserves[1], coin2.symbol)}\n              </Typography>\n            </Grid>\n          </Grid>\n\n          <hr className={classes.hr} />\n\n          {/* Liquidity Tokens Display */}\n          <Typography variant=\"h6\">Your Liquidity Pool Tokens</Typography>\n          <Grid container direction=\"row\" justifyContent=\"center\">\n            <Grid item xs={6}>\n              <Typography variant=\"body1\" className={classes.balance}>\n                {formatReserve(liquidityTokens, \"UNI-V2\")}\n              </Typography>\n            </Grid>\n          </Grid>\n        </Grid>\n        <Paper className={classes.paperContainer}>\n          {/*Red  Display to show the quote */}\n          <Grid\n            container\n            item\n            direction=\"column\"\n            alignItems=\"center\"\n            spacing={2}\n            className={classes.fullWidth}\n          >\n            {/* Tokens in */}\n            <Typography variant=\"h6\">Tokens in</Typography>\n            <Grid container direction=\"row\" justifyContent=\"space-between\">\n              <Grid item xs={6}>\n                <Typography variant=\"body1\" className={classes.balance}>\n                  {formatBalance(liquidityOut[0], coin1.symbol)}\n                </Typography>\n              </Grid>\n              <Grid item xs={6}>\n                <Typography variant=\"body1\" className={classes.balance}>\n                  {formatBalance(liquidityOut[1], coin2.symbol)}\n                </Typography>\n              </Grid>\n            </Grid>\n\n            <hr className={classes.hr} />\n\n            {/* Liquidity Tokens Display */}\n            <Typography variant=\"h6\">Liquidity Pool Tokens Out</Typography>\n            <Grid container direction=\"row\" justifyContent=\"center\">\n              <Grid item xs={6}>\n                <Typography variant=\"body1\" className={classes.balance}>\n                  {formatReserve(liquidityOut[2], \"UNI-V2\")}\n                </Typography>\n              </Grid>\n            </Grid>\n          </Grid>\n        </Paper>\n\n        <hr className={classes.hr} />\n      </Grid>\n      <Grid container direction=\"column\" alignItems=\"center\" spacing={2}>\n        <LoadingButton\n          loading={loading}\n          valid={isButtonEnabled()}\n          success={false}\n          fail={false}\n          onClick={deploy}\n        >\n          <AccountBalanceIcon className={classes.buttonIcon} />\n          Deploy\n        </LoadingButton>\n      </Grid>\n    </div>\n  );\n}\n\nexport default LiquidityDeployer;\n"]},"metadata":{},"sourceType":"module"}