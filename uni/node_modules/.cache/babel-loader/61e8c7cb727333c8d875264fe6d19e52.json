{"ast":null,"code":"import * as chains from './chains'; // If you add coins for a new network, make sure Weth address (for the router you are using) is the first entry\n\nconst AUTONITYCoins = [{\n  name: \"Auton\",\n  abbr: \"AUT\",\n  address: \"\" // Weth address is fetched from the router\n\n}, {\n  name: \"Newton\",\n  abbr: \"NEW\",\n  address: \"0xBd770416a3345F91E4B34576cb804a576fa48EB1\"\n}, {\n  name: \"Token A\",\n  abbr: \"TA\",\n  address: \"0xD5073808CbA7d24500aa8f659B339b87945958a6\"\n}, {\n  name: \"Token B\",\n  abbr: \"TB\",\n  address: \"0x908B8e60d149529d757F4aEd9320F246724f2b99\"\n}, {\n  name: \"Token C\",\n  abbr: \"TC\",\n  address: \"0x03c7D835CceE5d741b3f3D144eBfC5327925ECf9\"\n}, {\n  name: \"Token D\",\n  abbr: \"TD\",\n  address: \"0x90636A8bb3AD4C2168EE20CF5E6183D827Da2E91\"\n}];\nconst DEVNETCoins = [{\n  name: \"Auton\",\n  abbr: \"AUT\",\n  address: \"\" // Weth address is fetched from the router\n\n}, {\n  name: \"Newton\",\n  abbr: \"NEW\",\n  address: \"0xBd770416a3345F91E4B34576cb804a576fa48EB1\"\n}, {\n  name: \"Token A\",\n  abbr: \"TA\",\n  address: \"0xD5073808CbA7d24500aa8f659B339b87945958a6\"\n}, {\n  name: \"Token B\",\n  abbr: \"TB\",\n  address: \"0x908B8e60d149529d757F4aEd9320F246724f2b99\"\n}];\nconst PARASTATECoins = [{\n  name: \"Ether\",\n  abbr: \"ETH\",\n  address: \"\" // Weth address is fetched from the router\n\n}, {\n  name: \"Token A\",\n  abbr: \"TA\",\n  address: \"0x4EDFE8706Cefab9DCd52630adFFd00E9b93FF116\"\n}, {\n  name: \"Token B\",\n  abbr: \"TB\",\n  address: \"0x4489D87C8440B19f11d63FA2246f943F492F3F5F\"\n}, {\n  name: \"Token C\",\n  abbr: \"TC\",\n  address: \"0x1d29BD2ACedBff15A59e946a4DE26d5257447727\"\n}, {\n  name: \"Token D\",\n  abbr: \"TD\",\n  address: \"0xc108a13D00371520EbBeCc7DF5C8610C71F4FfbA\"\n}];\nconst GANACHECoins = [{\n  name: \"Ether\",\n  abbr: \"ETH\",\n  address: \"\" // Weth address is fetched from the router\n\n}, {\n  name: \"Token A\",\n  abbr: \"TA\",\n  address: \"0xE8C4BE1Bd495c984dD83B683966B7B538d3Ea82C\"\n}, {\n  name: \"Token B\",\n  abbr: \"TB\",\n  address: \"0x30988e63329713c3f3FeA1ca1B94D4Abb02F78C5\"\n}, {\n  name: \"Token C\",\n  abbr: \"TC\",\n  address: \"0x23b4ce07ef4e2378319E40CbC0cc95EAbCf8E419\"\n}, {\n  name: \"Token D\",\n  abbr: \"TD\",\n  address: \"0x49Ec3915F4daB907f7C6F74Cf5110366FCCc81A5\"\n}];\nconst MAINNETCoins = [{\n  name: \"Ether\",\n  abbr: \"ETH\",\n  address: \"\" // Weth address is fetched from the router\n\n}, {\n  name: \"Dai\",\n  abbr: \"DAI\",\n  address: \"0x6B175474E89094C44Da98b954EedeAC495271d0F\"\n}, {\n  name: \"Tether USD\",\n  abbr: \"USDT\",\n  address: \"0xdAC17F958D2ee523a2206206994597C13D831ec7\"\n}, {\n  name: \"Ampleforth\",\n  abbr: \"AMPL\",\n  address: \"0xD46bA6D942050d489DBd938a2C909A5d5039A161\"\n}, {\n  name: \"Wrapped BTC\",\n  abbr: \"WBTC\",\n  address: \"0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599\"\n}, {\n  name: \"Fei USD\",\n  abbr: \"FEI\",\n  address: \"0x956F47F50A910163D8BF957Cf5846D573E7f87CA\"\n}, {\n  name: \"frax\",\n  abbr: \"FRAX\",\n  address: \"0x853d955aCEf822Db058eb8505911ED77F175b99e\"\n}, {\n  name: \"Frax Share\",\n  abbr: \"FXS\",\n  address: \"0x3432B6A60D23Ca0dFCa7761B7ab56459D9C964D0\"\n}, {\n  name: \"renBTC\",\n  abbr: \"renBTC\",\n  address: \"0xEB4C2781e4ebA804CE9a9803C67d0893436bB27D\"\n}, {\n  name: \"StakeWise\",\n  abbr: \"SWISE\",\n  address: \"0x48C3399719B582dD63eB5AADf12A40B4C3f52FA2\"\n}];\nconst ROPSTENCoins = [{\n  name: \"Ether\",\n  abbr: \"ETH\",\n  address: \"\" // Weth address is fetched from the router\n\n}, {\n  name: \"Dai\",\n  abbr: \"DAI\",\n  address: \"0xad6d458402f60fd3bd25163575031acdce07538d\"\n}, {\n  name: \"Tether USD\",\n  abbr: \"USDT\",\n  address: \"0x6ee856ae55b6e1a249f04cd3b947141bc146273c\"\n}];\nconst KOVANCoins = [{\n  name: \"Ether\",\n  abbr: \"ETH\",\n  address: \"\" // // Weth address is fetched from the router\n\n}, {\n  name: \"Dai\",\n  abbr: \"DAI\",\n  address: \"0xc4375b7de8af5a38a93548eb8453a498222c4ff2\"\n}, {\n  name: \"Tether USD\",\n  abbr: \"USDT\",\n  address: \"0xf3e0d7bf58c5d455d31ef1c2d5375904df525105\"\n}];\nconst RINKEBYCoins = [{\n  name: \"Ether\",\n  abbr: \"ETH\",\n  address: \"\" // Weth address is fetched from the router\n\n}, {\n  name: \"Dai\",\n  abbr: \"DAI\",\n  address: \"0x95b58a6bff3d14b7db2f5cb5f0ad413dc2940658\"\n}, {\n  name: \"Tether USD\",\n  abbr: \"USDT\",\n  address: \"0x3b00ef435fa4fcff5c209a37d1f3dcff37c705ad\"\n}];\nconst GÖRLICoins = [{\n  name: \"Ether\",\n  abbr: \"ETH\",\n  address: \"\" // Weth address is fetched from the router\n\n}, {\n  name: \"Dai\",\n  abbr: \"DAI\",\n  address: \"0x73967c6a0904aa032c103b4104747e88c566b1a2\"\n}, {\n  name: \"Tether USD\",\n  abbr: \"USDT\",\n  address: \"0x509ee0d083ddf8ac028f2a56731412edd63223b9\"\n}];\nconst COINS = new Map();\nCOINS.set(chains.ChainId.MAINNET, MAINNETCoins);\nCOINS.set(chains.ChainId.ROPSTEN, ROPSTENCoins);\nCOINS.set(chains.ChainId.RINKEBY, RINKEBYCoins);\nCOINS.set(chains.ChainId.GÖRLI, GÖRLICoins);\nCOINS.set(chains.ChainId.KOVAN, KOVANCoins);\nCOINS.set(chains.ChainId.AUTONITY, AUTONITYCoins);\nCOINS.set(chains.ChainId.DEVNET, DEVNETCoins);\nCOINS.set(chains.ChainId.PARASTATE, PARASTATECoins);\nCOINS.set(chains.ChainId.GANCHE, GANACHECoins);\nexport default COINS;","map":{"version":3,"sources":["/Users/lelouch/Desktop/ethnyc/eth-nyc-global/Alternative-Uniswap-Interface/src/constants/coins.js"],"names":["chains","AUTONITYCoins","name","abbr","address","DEVNETCoins","PARASTATECoins","GANACHECoins","MAINNETCoins","ROPSTENCoins","KOVANCoins","RINKEBYCoins","GÖRLICoins","COINS","Map","set","ChainId","MAINNET","ROPSTEN","RINKEBY","GÖRLI","KOVAN","AUTONITY","DEVNET","PARASTATE","GANCHE"],"mappings":"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","sourcesContent":["import * as chains from './chains';\n\n// If you add coins for a new network, make sure Weth address (for the router you are using) is the first entry\n\nconst AUTONITYCoins = [\n  {\n    name: \"Auton\",\n    abbr: \"AUT\",\n    address: \"\", // Weth address is fetched from the router\n  },\n  {\n    name: \"Newton\",\n    abbr: \"NEW\",\n    address: \"0xBd770416a3345F91E4B34576cb804a576fa48EB1\",\n  },\n  {\n    name: \"Token A\",\n    abbr: \"TA\",\n    address: \"0xD5073808CbA7d24500aa8f659B339b87945958a6\",\n  },\n  {\n    name: \"Token B\",\n    abbr: \"TB\",\n    address: \"0x908B8e60d149529d757F4aEd9320F246724f2b99\",\n  },\n  {\n    name: \"Token C\",\n    abbr: \"TC\",\n    address: \"0x03c7D835CceE5d741b3f3D144eBfC5327925ECf9\",\n  },\n  {\n    name: \"Token D\",\n    abbr: \"TD\",\n    address: \"0x90636A8bb3AD4C2168EE20CF5E6183D827Da2E91\",\n  }\n]\n\nconst DEVNETCoins = [\n  {\n    name: \"Auton\",\n    abbr: \"AUT\",\n    address: \"\", // Weth address is fetched from the router\n  },\n  {\n    name: \"Newton\",\n    abbr: \"NEW\",\n    address: \"0xBd770416a3345F91E4B34576cb804a576fa48EB1\",\n  },\n  {\n    name: \"Token A\",\n    abbr: \"TA\",\n    address: \"0xD5073808CbA7d24500aa8f659B339b87945958a6\",\n  },\n  {\n    name: \"Token B\",\n    abbr: \"TB\",\n    address: \"0x908B8e60d149529d757F4aEd9320F246724f2b99\",\n  }\n]\n\nconst PARASTATECoins = [\n  {\n    name: \"Ether\",\n    abbr: \"ETH\",\n    address: \"\", // Weth address is fetched from the router\n  },\n  {\n    name: \"Token A\",\n    abbr: \"TA\",\n    address: \"0x4EDFE8706Cefab9DCd52630adFFd00E9b93FF116\",\n  },\n  {\n    name: \"Token B\",\n    abbr: \"TB\",\n    address: \"0x4489D87C8440B19f11d63FA2246f943F492F3F5F\",\n  },\n  \n  {\n    name: \"Token C\",\n    abbr: \"TC\",\n    address: \"0x1d29BD2ACedBff15A59e946a4DE26d5257447727\",\n  },\n  {\n    name: \"Token D\",\n    abbr: \"TD\",\n    address: \"0xc108a13D00371520EbBeCc7DF5C8610C71F4FfbA\",\n  }\n]\n\nconst GANACHECoins = [\n  {\n    name: \"Ether\",\n    abbr: \"ETH\",\n    address: \"\", // Weth address is fetched from the router\n  },\n  {\n    name: \"Token A\",\n    abbr: \"TA\",\n    address: \"0xE8C4BE1Bd495c984dD83B683966B7B538d3Ea82C\",\n  },\n  {\n    name: \"Token B\",\n    abbr: \"TB\",\n    address: \"0x30988e63329713c3f3FeA1ca1B94D4Abb02F78C5\",\n  },\n  \n  {\n    name: \"Token C\",\n    abbr: \"TC\",\n    address: \"0x23b4ce07ef4e2378319E40CbC0cc95EAbCf8E419\",\n  },\n  {\n    name: \"Token D\",\n    abbr: \"TD\",\n    address: \"0x49Ec3915F4daB907f7C6F74Cf5110366FCCc81A5\",\n  }\n]\n\nconst MAINNETCoins = [\n  {\n    name: \"Ether\",\n    abbr: \"ETH\",\n    address: \"\", // Weth address is fetched from the router\n  },\n  {\n    name: \"Dai\",\n    abbr: \"DAI\",\n    address: \"0x6B175474E89094C44Da98b954EedeAC495271d0F\",\n  },\n  {\n    name: \"Tether USD\",\n    abbr: \"USDT\",\n    address: \"0xdAC17F958D2ee523a2206206994597C13D831ec7\",\n  },\n  {\n    name: \"Ampleforth\",\n    abbr: \"AMPL\",\n    address: \"0xD46bA6D942050d489DBd938a2C909A5d5039A161\",\n  },\n  {\n    name: \"Wrapped BTC\",\n    abbr: \"WBTC\",\n    address: \"0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599\",\n  },\n  {\n    name: \"Fei USD\",\n    abbr: \"FEI\",\n    address: \"0x956F47F50A910163D8BF957Cf5846D573E7f87CA\",\n  },\n  {\n    name: \"frax\",\n    abbr: \"FRAX\",\n    address: \"0x853d955aCEf822Db058eb8505911ED77F175b99e\",\n  },\n  {\n    name: \"Frax Share\",\n    abbr: \"FXS\",\n    address: \"0x3432B6A60D23Ca0dFCa7761B7ab56459D9C964D0\",\n  },\n  {\n    name: \"renBTC\",\n    abbr: \"renBTC\",\n    address: \"0xEB4C2781e4ebA804CE9a9803C67d0893436bB27D\",\n  },\n  {\n    name: \"StakeWise\",\n    abbr: \"SWISE\",\n    address: \"0x48C3399719B582dD63eB5AADf12A40B4C3f52FA2\",\n  },\n]\n\nconst ROPSTENCoins = [\n  {\n    name: \"Ether\",\n    abbr: \"ETH\",\n    address: \"\", // Weth address is fetched from the router\n  },\n  {\n    name: \"Dai\",\n    abbr: \"DAI\",\n    address: \"0xad6d458402f60fd3bd25163575031acdce07538d\",\n  },\n  {\n    name: \"Tether USD\",\n    abbr: \"USDT\",\n    address: \"0x6ee856ae55b6e1a249f04cd3b947141bc146273c\",\n  },\n]\n\nconst KOVANCoins = [\n  {\n    name: \"Ether\",\n    abbr: \"ETH\",\n    address: \"\", // // Weth address is fetched from the router\n  },\n  {\n    name: \"Dai\",\n    abbr: \"DAI\",\n    address: \"0xc4375b7de8af5a38a93548eb8453a498222c4ff2\",\n  },\n  {\n    name: \"Tether USD\",\n    abbr: \"USDT\",\n    address: \"0xf3e0d7bf58c5d455d31ef1c2d5375904df525105\",\n  },\n]\n\nconst RINKEBYCoins = [\n  {\n    name: \"Ether\",\n    abbr: \"ETH\",\n    address: \"\", // Weth address is fetched from the router\n  },\n  {\n    name: \"Dai\",\n    abbr: \"DAI\",\n    address: \"0x95b58a6bff3d14b7db2f5cb5f0ad413dc2940658\",\n  },\n  {\n    name: \"Tether USD\",\n    abbr: \"USDT\",\n    address: \"0x3b00ef435fa4fcff5c209a37d1f3dcff37c705ad\",\n  },\n]\n\nconst GÖRLICoins = [\n  {\n    name: \"Ether\",\n    abbr: \"ETH\",\n    address: \"\", // Weth address is fetched from the router\n  },\n  {\n    name: \"Dai\",\n    abbr: \"DAI\",\n    address: \"0x73967c6a0904aa032c103b4104747e88c566b1a2\",\n  },\n  {\n    name: \"Tether USD\",\n    abbr: \"USDT\",\n    address: \"0x509ee0d083ddf8ac028f2a56731412edd63223b9\",\n  },\n]\n\nconst COINS = new Map();\nCOINS.set(chains.ChainId.MAINNET, MAINNETCoins);\nCOINS.set(chains.ChainId.ROPSTEN, ROPSTENCoins);\nCOINS.set(chains.ChainId.RINKEBY, RINKEBYCoins);\nCOINS.set(chains.ChainId.GÖRLI, GÖRLICoins);\nCOINS.set(chains.ChainId.KOVAN, KOVANCoins);\nCOINS.set(chains.ChainId.AUTONITY, AUTONITYCoins);\nCOINS.set(chains.ChainId.DEVNET, DEVNETCoins);\nCOINS.set(chains.ChainId.PARASTATE, PARASTATECoins);\nCOINS.set(chains.ChainId.GANCHE, GANACHECoins)\nexport default COINS\n"]},"metadata":{},"sourceType":"module"}