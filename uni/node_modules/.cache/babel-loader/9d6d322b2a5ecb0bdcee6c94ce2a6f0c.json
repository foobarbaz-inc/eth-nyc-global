{"ast":null,"code":"var _jsxFileName = \"/Users/lelouch/Desktop/ethnyc/eth-nyc-global/Alternative-Uniswap-Interface/src/network.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState, useRef } from \"react\";\nimport { Contract, ethers } from \"ethers\";\nimport { createTheme, ThemeProvider } from \"@material-ui/core\";\nimport { SnackbarProvider } from \"notistack\";\nimport ConnectWalletPage from \"./Components/connectWalletPage\";\nimport { getProvider, getAccount, getFactory, getRouter, getNetwork, getWeth } from \"./ethereumFunctions\";\nimport COINS from \"./constants/coins\";\nimport * as chains from \"./constants/chains\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: \"#ff0000\",\n      contrastText: \"#ffffff\"\n    },\n    secondary: {\n      main: \"#9e9e9e\",\n      contrastText: \"#ffffff\"\n    }\n  }\n});\nconst autoReconnectDelay = 5000;\n\nconst Web3Provider = props => {\n  _s();\n\n  const [isConnected, setConnected] = useState(true);\n  let network = Object.create({});\n  network.provider = useRef(null);\n  network.signer = useRef(null);\n  network.account = useRef(null);\n  network.coins = [];\n  network.chainID = useRef(null);\n  network.router = useRef(null);\n  network.factory = useRef(null);\n  network.weth = useRef(null);\n  const backgroundListener = useRef(null);\n\n  async function setupConnection() {\n    try {\n      console.log(\"lets go!\");\n      network.provider = await getProvider();\n      network.signer = await network.provider.getSigner();\n      await getAccount().then(async result => {\n        network.account = result;\n      });\n      await getNetwork(network.provider).then(async chainId => {\n        // Set chainID\n        network.chainID = chainId;\n\n        if (chains.networks.includes(chainId)) {\n          // Get the router using the chainID\n          network.router = await getRouter(chains.routerAddress.get(chainId), network.signer); // Get default coins for network\n\n          network.coins = COINS.get(chainId); // Get Weth address from router\n\n          await network.router.WETH().then(wethAddress => {\n            network.weth = getWeth(wethAddress, network.signer); // Set the value of the weth address in the default coins array\n\n            network.coins[0].address = wethAddress;\n          }); // Get the factory address from the router\n\n          await network.router.factory().then(factory_address => {\n            network.factory = getFactory(factory_address, network.signer);\n          });\n          setConnected(true);\n        } else {\n          console.log(\"Wrong network mate.\");\n          setConnected(false);\n        }\n      });\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  async function createListener() {// return setInterval(async () => {\n    //   // console.log(\"Heartbeat\");\n    //   try {\n    //     // Check the account has not changed\n    //     const account = await getAccount();\n    //     if (account != network.account) {\n    //       await setupConnection();\n    //     }\n    //     // const chainID = await getNetwork(network.provider);\n    //     // if (chainID !== network.chainID){\n    //     //   setConnected(false);\n    //     //   await setupConnection();\n    //     // }\n    //   } catch (e) {\n    //     setConnected(false);\n    //     await setupConnection();\n    //   }\n    // }, 1000);\n  }\n\n  useEffect(async () => {\n    // Initial setup\n    console.log(\"Initial hook\");\n    await setupConnection();\n    console.log(\"network: \", network); // Start background listener\n\n    if (backgroundListener.current != null) {\n      clearInterval(backgroundListener.current);\n    }\n\n    const listener = createListener();\n    backgroundListener.current = listener;\n    return () => clearInterval(backgroundListener.current);\n  }, []);\n\n  const renderNotConnected = () => {\n    console.log(\"Rendering\");\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(ConnectWalletPage, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [!isConnected && renderNotConnected(), isConnected && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\" \", props.render(network)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 23\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Web3Provider, \"2t+ZFInZ6Tltz+kO5+P0AvdpPzs=\");\n\n_c = Web3Provider;\nexport default Web3Provider;\n\nvar _c;\n\n$RefreshReg$(_c, \"Web3Provider\");","map":{"version":3,"sources":["/Users/lelouch/Desktop/ethnyc/eth-nyc-global/Alternative-Uniswap-Interface/src/network.js"],"names":["useEffect","useState","useRef","Contract","ethers","createTheme","ThemeProvider","SnackbarProvider","ConnectWalletPage","getProvider","getAccount","getFactory","getRouter","getNetwork","getWeth","COINS","chains","theme","palette","primary","main","contrastText","secondary","autoReconnectDelay","Web3Provider","props","isConnected","setConnected","network","Object","create","provider","signer","account","coins","chainID","router","factory","weth","backgroundListener","setupConnection","console","log","getSigner","then","result","chainId","networks","includes","routerAddress","get","WETH","wethAddress","address","factory_address","e","createListener","current","clearInterval","listener","renderNotConnected","render"],"mappings":"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","sourcesContent":["import { useEffect, useState, useRef } from \"react\";\nimport { Contract, ethers } from \"ethers\";\nimport { createTheme, ThemeProvider } from \"@material-ui/core\";\nimport { SnackbarProvider } from \"notistack\";\nimport ConnectWalletPage from \"./Components/connectWalletPage\";\nimport {\n  getProvider,\n  getAccount,\n  getFactory,\n  getRouter,\n  getNetwork,\n  getWeth,\n} from \"./ethereumFunctions\";\nimport COINS from \"./constants/coins\";\nimport * as chains from \"./constants/chains\";\n\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: \"#ff0000\",\n      contrastText: \"#ffffff\",\n    },\n    secondary: {\n      main: \"#9e9e9e\",\n      contrastText: \"#ffffff\",\n    },\n  },\n});\n\nconst autoReconnectDelay = 5000;\n\nconst Web3Provider = (props) => {\n  const [isConnected, setConnected] = useState(true);\n  let network = Object.create({});\n  network.provider = useRef(null);\n  network.signer = useRef(null);\n  network.account = useRef(null);\n  network.coins = [];\n  network.chainID = useRef(null);\n  network.router = useRef(null);\n  network.factory = useRef(null);\n  network.weth = useRef(null);\n  const backgroundListener = useRef(null);\n  async function setupConnection() {\n    try {\n      console.log(\"lets go!\");\n      network.provider = await getProvider();\n      network.signer = await network.provider.getSigner();\n      await getAccount().then(async (result) => {\n        network.account = result;\n      });\n\n      await getNetwork(network.provider).then(async (chainId) => {\n        // Set chainID\n        network.chainID = chainId;\n        if (chains.networks.includes(chainId)) {\n          // Get the router using the chainID\n          network.router = await getRouter(\n            chains.routerAddress.get(chainId),\n            network.signer\n          );\n          // Get default coins for network\n          network.coins = COINS.get(chainId);\n          // Get Weth address from router\n          await network.router.WETH().then((wethAddress) => {\n            network.weth = getWeth(wethAddress, network.signer);\n            // Set the value of the weth address in the default coins array\n            network.coins[0].address = wethAddress;\n          });\n          // Get the factory address from the router\n          await network.router.factory().then((factory_address) => {\n            network.factory = getFactory(factory_address, network.signer);\n          });\n          setConnected(true);\n        } else {\n          console.log(\"Wrong network mate.\");\n          setConnected(false);\n        }\n      });\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  async function createListener() {\n    // return setInterval(async () => {\n    //   // console.log(\"Heartbeat\");\n    //   try {\n    //     // Check the account has not changed\n    //     const account = await getAccount();\n    //     if (account != network.account) {\n    //       await setupConnection();\n    //     }\n    //     // const chainID = await getNetwork(network.provider);\n    //     // if (chainID !== network.chainID){\n    //     //   setConnected(false);\n    //     //   await setupConnection();\n    //     // }\n    //   } catch (e) {\n    //     setConnected(false);\n    //     await setupConnection();\n    //   }\n    // }, 1000);\n  }\n\n  useEffect(async () => {\n    // Initial setup\n    console.log(\"Initial hook\");\n    await setupConnection();\n    console.log(\"network: \", network);\n\n    // Start background listener\n    if (backgroundListener.current != null) {\n      clearInterval(backgroundListener.current);\n    }\n    const listener = createListener();\n    backgroundListener.current = listener;\n    return () => clearInterval(backgroundListener.current);\n  }, []);\n\n  const renderNotConnected = () => {\n    console.log(\"Rendering\");\n    return (\n      <div className=\"App\">\n        <div>\n          <ConnectWalletPage />\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <>\n      {!isConnected && renderNotConnected()}\n      {isConnected && <div> {props.render(network)}</div>}\n    </>\n  );\n};\n\nexport default Web3Provider;\n"]},"metadata":{},"sourceType":"module"}